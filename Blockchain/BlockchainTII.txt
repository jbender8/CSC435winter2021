C:\Users\jessi\Documents\2020-2021 school\Winter\CSC435winter2021\Blockchain>java Blockchain 1
Process ID #: 1
Public Key Port: 4711
Unverified Block Port: 4821
Updated Blockchain Port: 4931
Input File: BlockInput1.txt
java.net.ConnectException: Connection refused: connect
        at java.base/java.net.DualStackPlainSocketImpl.connect0(Native Method)
        at java.base/java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
        at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:400)
        at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:243)
        at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:225)
        at java.base/java.net.PlainSocketImpl.connect(PlainSocketImpl.java:148)
        at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:402)
        at java.base/java.net.Socket.connect(Socket.java:591)
        at java.base/java.net.Socket.connect(Socket.java:540)
        at java.base/java.net.Socket.<init>(Socket.java:436)
        at java.base/java.net.Socket.<init>(Socket.java:213)
        at getBlocks.input(Blockchain.java:128)
        at Blockchain.main(Blockchain.java:80)

C:\Users\jessi\Documents\2020-2021 school\Winter\CSC435winter2021\Blockchain>
/*--------------------------------------------------------

1. Name / Date: Jessica Bender / version 1 - 2/22/2021

2. Java version used, if not the official version for the class:

My Java:
java version "9.0.4"
Java(TM) SE Runtime Environment (build 9.0.4+11)
Java HotSpot(TM) 64-Bit Server VM (build 9.0.4+11, mixed mode)

3. Precise command-line compilation examples / instructions:
> javac Blockchain.java

4. Precise examples / instructions to run this program:
In separate shell windows:

> java Blockchain 0
> java Blockchain 1
> java Blockchain 2

5. List of files needed for running the program.

 a. Blockchain.Java

6. Notes:

Ample help from provided code given in class and the below web sources that were given in the sample code.
The web sources:

https://mkyong.com/java/how-to-parse-json-with-gson/
http://www.java2s.com/Code/Java/Security/SignatureSignAndVerify.htm
https://www.mkyong.com/java/java-digital-signatures-example/ (not so clear)
https://javadigest.wordpress.com/2012/08/26/rsa-encryption-example/
https://www.programcreek.com/java-api-examples/index.php?api=java.security.SecureRandom
https://www.mkyong.com/java/java-sha-hashing-example/
https://stackoverflow.com/questions/19818550/java-retrieve-the-actual-value-of-the-public-key-from-the-keypair-object
https://www.java67.com/2014/10/how-to-pad-numbers-with-leading-zeroes-in-Java-example.html 


It does not connect. Wanted to turn in a start tho in hopes of getting some points.

----------------------------------------------------------*/

//Code Starts Here:
import java.text.*;//// importing all packages in java text.
import java.security.*;// importing all packages in java Security. Allows imports like: 
import java.io.*;// importing all packages in java io.
import java.net.*;// importing all packages in java net.
import java.util.*; // importing all packages in java until.

// import com.google.*;
// import com.google.gson.Gson;
// import com.google.gson.GsonBuilder;

public class Blockchain{ //start blockchain class
    public static void main(String[] args) { //main method
        int ProcessID = 0; //Int process ID set to 0
        String InputFile = "";// inilalize InputFile
        if (args[0].equals("0")){ //check to see if args = 0
            ProcessID = 0; //Sets ProcessID to 0 since args = 0
            Ports.set(ProcessID); //sets ports based off ProcessID
        }//close 0 if
        else if (args[0].equals("1")){ //check to see if args = 1
            ProcessID = 1; //Sets ProcessID to 1 since args = 1
            Ports.set(ProcessID); //sets ports based off ProcessID
        }
        else if (args[0].equals("2")){ //check to see if args = 2
            ProcessID = 2; //Sets ProcessID to 2 since args = 2
            Ports.set(ProcessID);//sets ports based off ProcessID
            new Thread(new threada()).start();//start new thread
        }
        else{//if args is anything else
            ProcessID = 0; //set ProcessID to 0
            Ports.set(ProcessID); //sets ports based off ProcessID
        }//close else
        InputFile = "BlockInput"+ProcessID+".txt";//set InputFile to BlockInput0
        System.out.println("Process ID #: "+ProcessID); //Prints Process ID Number 
        System.out.println("Public Key Port: "+Ports.getkeyPort()); //Prints Public Key Port 
        System.out.println("Unverified Block Port: "+Ports.getunverifiedPort()); // prints Unverified Block Port
        System.out.println("Updated Blockchain Port: "+Ports.getupdatedPort()); //prints Updated Blockchain Port
        System.out.println("Input File: "+InputFile); //prints InputFile
        getBlocks.input(InputFile, ProcessID);
    }
}

class Ports{ //Ports class
    static int keyPort = 4710; //Public Key port
    static int unverifiedPort = 4820; // unverifiedPort
    static int updatedPort  = 4930; // updatedPort
    public static void set(int ID){//set the key with the Prosses ID
        keyPort = keyPort + ID; //set keyport to be 4710 + Process ID
        unverifiedPort = unverifiedPort + ID; //set unverifiedPort to be 4820 + Process ID
        updatedPort = updatedPort + ID; //set updatedPort to be 4930 + Process ID
    }//ends set
    public static int getkeyPort(){ //get Keyport
        return keyPort;//return Keyport
    }//ends getkeyPort
    public static int getunverifiedPort(){ //get unverifiedPort
        return unverifiedPort;//return unverifiedPort
    }//ends getunverifiedPort
    public static int getupdatedPort(){ //get updatedPort
        return updatedPort;//return updatedPort
    }//ends getupdatedPort
}//ends ports

class getBlocks{
    public static void input(String InputFile, int ProcessID){//arraylist from BlockRecod with the input file and ProcessID
        Socket sock; //Socket called sock
        ObjectOutputStream out;//ObjectOutputStream called out
        BufferedReader bufferreader;
        ArrayList<BlockRecord> textinput = new ArrayList<BlockRecord>(); //sets up new Array list
        try{//trys the following code, if fails jumps to catch.
            bufferreader = new BufferedReader(new FileReader("BlockInput0.txt"));//assigns buffer reader to file reader
            String read;// new string called read
            boolean b = (read = bufferreader.readLine()) != null;//boolean to see if read still has more lines to read
            while(b){//while b is not false
                BlockRecord i = new BlockRecord(); //new BlockRecord
                i.setVerificationProcessID(Integer.toString(ProcessID));//set ProcessID
                i.setBlockID(new String(UUID.randomUUID().toString()));//Set UUID

                String[] lines =read.split(" +");//splits file by +
                i.setFname(lines[0]);//first line is First name
                i.setLname(lines[1]);//Second line is Second Name
                i.setDOB(lines[2]);//Third line is DOB
                i.setSSNum(lines[3]);//Fourth line is SSNum
                i.setDiag(lines[4]);//5th line is Diag
                i.setTreat(lines[5]);//6th line is Treat
                i.setRx(lines[6]);//7th line is RX
                textinput.add(i);//adding i to arraylist
                    sock = new Socket("localhost",Ports.unverifiedPort);// new socket at localhost and port
                    out = new ObjectOutputStream(sock.getOutputStream());//new out
                    out.writeObject(textinput);//write text input
                    out.flush();//flush out
                    out.close();//close out
            }//closes while
        }//closes try
        catch (IOException x) {x.printStackTrace ();} //catches IOExeption when try fails and prints the error.
        
    }//closes Arraylist input
}

class threada implements Runnable{ //treada class
    public void run(){ //runs
        Socket sock; //Socket called sock
        ServerSocket seversock;//SeverSocket called seversock
    
        try{//trys the following code, if fails jumps to catch.
            seversock = new ServerSocket(1591,100); //assigns sock toa new Socket with serverName and the port 1581
            while(true){//contines while true
                sock = seversock.accept();//accepts the seversocket
            }//end while true
        }//end try
        catch (IOException x) {x.printStackTrace ();} //catches IOExeption when try fails and prints the error.
    }//end run
}//end threada

//------------------------------------------------------------------------------------------------------------------------------------------------------------
//Good part of BlockRecord is copied from BlockJ.java if not all of it is
//added my own comments
class BlockRecord {//BlockRecord class
    String BlockID; //initalized string named BlockID
    String VerificationProcessID; //initalized string named VerificationProcessID
    String PreviousHash; //initalized string named PreviousHash
    UUID uuid; //initalized UUID named uuid
    String Fname; //initalized string named Fname
    String Lname; //initalized string named Lname
    String SSNum; //initalized string named SSNum
    String DOB; //initalized string named DOB
    String Diag; //initalized string named Diag
    String Treat; //initalized string named Treat
    String Rx; //initalized string named Rx
    String RandomSeed; //initalized string named RandomSeed
    String WinningHash; //initalized string named WinningHash



    public String getBlockID() { //String Method for getBlockID
        return BlockID; //returns BlockID
    }

    public void setBlockID(String BID) {//Void method to set BlockID
        this.BlockID = BID;//sets BlockID to BID
    }

    public String getVerificationProcessID() { //String Method for getVerificationProcessID
        return this.VerificationProcessID; //returns VerificationProcessID
    }

    public void setVerificationProcessID(String VID) { //Void method to set VerificationProcessID
        this.VerificationProcessID = VID;//sets VerificationProcessID to VID
    }

    public String getPreviousHash() { //String Method for getPreviousHash
        return this.PreviousHash; //returns PreviousHash
    }

    public void setPreviousHash(String PH) {//Void method to set PreviousHash
        this.PreviousHash = PH;// sets PreviousHash to PH
    }

    public UUID getUUID() { //UUID Method for getUUID
        return uuid; //returns uuid
    } 

    public void setUUID(UUID ud) {//Void method to set uuid
        this.uuid = ud;// sets UUID to ud
    }

    public String getLname() { //String Method for getLname
        return Lname; //returns Lname
    }

    public void setLname(String LN) {//Void method to set Lname
        this.Lname = LN;//sets Lname to LN
    }

    public String getFname() { //String Method for getFname
        return Fname; //returns Fname
    }

    public void setFname(String FN) {//Void method to set Fname
        this.Fname = FN;//sets Fname to FN
    }

    public String getSSNum() { //String Method for getSSNum
        return SSNum; //returns SSNum
    }

    public void setSSNum(String SS) {//Void method to set SSNum
        this.SSNum = SS; //sets SSNum to SS
    }

    public String getDOB() { //String Method for getDOB
        return DOB; //returns DOB
    }

    public void setDOB(String RS) {//Void method to set DOB
        this.DOB = RS;//sets DOB to RS
    }

    public String getDiag() { //String Method for getDiag
        return Diag; //returns Diag
    }

    public void setDiag(String D) {//Void method to set Diag
        this.Diag = D;//sets Diag to D
    }

    public String getTreat() { //String Method for getTreat
        return Treat; //returns Treat
    }

    public void setTreat(String Tr) {//Void method to set Treat
        this.Treat = Tr;//sets Treat to Tr
    }

    public String getRx() { //String Method for getRx
        return Rx; //returns Rx
    }

    public void setRx(String Rx) {//Void method to set Rx
        this.Rx = Rx;// sets Rx to Rx
    }

    public String getRandomSeed() { //String Method for getRandomSeed
        return RandomSeed; //returns RandomSeed
    }

    public void setRandomSeed(String RS) {//Void method to set RandomSeed
        this.RandomSeed = RS;// sets RandomSeed to rs
    }

    public String getWinningHash() { //String Method for getWinningHash
        return WinningHash; //returns WinningHash
    }

    public void setWinningHash(String WH) {//Void method to set WinningHash
        this.WinningHash = WH;//sets WinningHash to WH
    }

}

